Table: Cinema

+-------------+------+
| Column Name | Type |
+-------------+------+
| seat_id     | int  |
| free        | bool |
+-------------+------+
seat_id is an auto-increment primary key column for this table.
Each row of this table indicates whether the ith seat is free or not. 1 means free while 0 means occupied.
 

Write an SQL query to report all the consecutive available seats in the cinema.

Return the result table ordered by seat_id in ascending order.

The test cases are generated so that more than two seats are consecutively available.

The query result format is in the following example.

 

Example 1:

Input: 
Cinema table:
+---------+------+
| seat_id | free |
+---------+------+
| 1       | 1    |
| 2       | 0    |
| 3       | 1    |
| 4       | 1    |
| 5       | 1    |
+---------+------+
Output: 
+---------+
| seat_id |
+---------+
| 3       |
| 4       |
| 5       |
+---------+

Solution 1:

SELECT DISTINCT a.seat_id
FROM Cinema a
JOIN Cinema b
ON ABS(a.seat_id - b.seat_id) = 1
AND a.free = 1 AND b.free = 1
ORDER BY 1;

Solution 2 (Window Function):

SELECT seat_id
FROM (SELECT seat_id, free, 
      LAG(free, 1) OVER(ORDER BY seat_id) "lag_rank",
      LEAD(free, 1) OVER(ORDER BY seat_id) "lead_rank"
      FROM Cinema) t
WHERE (free = 1 AND lag_rank = 1)
OR (free = 1 AND lead_rank = 1)
ORDER BY 1;

